
// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview Image generation flow for social media posts, with optional text overlay,
 * considering niche, category, image type, post topic, and visual description for highly personalized results.
 *
 * - generatePostImage - A function that handles the image generation process.
 * - GeneratePostImageInput - The input type for the generatePostImage function.
 * - GeneratePostImageOutput - The return type for the generatePostImage function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GeneratePostImageInputSchema = z.object({
  imageVisualPrompt: z
    .string()
    .describe('A detailed description of what the image should visually depict.'),
  overlayText: z
    .string()
    .optional() 
    .describe('The AI-generated hook or short text to prominently display on the generated image. If empty, no text will be overlaid.'),
  niche: z.string().describe('The niche of the post (e.g., Food, Travel, Technology). This is required.'),
  category: z.string().describe('The category of the post (e.g., Recipe, Landscape, Product Review). This is required.'),
  imageType: z.string().describe('The desired artistic style of the image (e.g., Photography, Illustration, Modern Design). This is required.'),
  postTopic: z.string().describe('The original topic or idea of the social media post, for broader context.'),
  postType: z.string().optional().describe('The type of the post (e.g., Tips, Educational, Promotional) for additional context.'),
});
export type GeneratePostImageInput = z.infer<typeof GeneratePostImageInputSchema>;

const GeneratePostImageOutputSchema = z.object({
  imageUri: z
    .string()
    .describe(
      'The data URI of the generated image for the social media post. The data URI must include a MIME type and use Base64 encoding. Expected format: \'data:<mimetype>;base64,<encoded_data>\'.' // KEEP THIS COMMENT
    ),
});
export type GeneratePostImageOutput = z.infer<typeof GeneratePostImageOutputSchema>;

export async function generatePostImage(input: GeneratePostImageInput): Promise<GeneratePostImageOutput> {
  return generatePostImageFlow(input);
}

const generatePostImageFlow = ai.defineFlow(
  {
    name: 'generatePostImageFlow',
    inputSchema: GeneratePostImageInputSchema,
    outputSchema: GeneratePostImageOutputSchema,
  },
  async (input: GeneratePostImageInput) => {
    let imagePrompt = `You are an AI social media image generator.
Your primary task is to create an image based on the following detailed visual description: "${input.imageVisualPrompt}".
This image is for a social media post related to the general topic: "${input.postTopic}".

The image must strictly adhere to the following parameters:
- Niche: "${input.niche}"
- Category: "${input.category}"
- Image Style: "${input.imageType}"`;

    if (input.postType) {
      imagePrompt += `\n- Post Type Context: This image is part of a "${input.postType}" post. Consider this for the overall mood or subtle thematic elements, ensuring it complements the main visual description.`;
    }

    if (input.overlayText && input.overlayText.trim() !== '') {
      imagePrompt += `\n\nThe most critical visual element is to feature the following AI-generated hook text directly ON the image in a visually appealing, clear, and prominent way: "${input.overlayText}".
The text should be seamlessly integrated into the image's design as if it were a professional social media graphic. Pay close attention to typography, color contrast, and placement to ensure the text is highly readable and enhances the overall image.`;
    } else {
      imagePrompt += `\n\nGenerate a high-quality image based purely on the visual description, niche, category, image type, and post context. No text should be overlaid on this image.`;
    }
    
    imagePrompt += `\nThe overall image composition and style should be suitable for the visual prompt, niche, category, and specified image type. Aim for an engaging, high-quality, and aesthetically pleasing result.`;
    
    const {media} = await ai.generate({
      model: 'googleai/gemini-2.0-flash-exp',
      prompt: [
        {
          text: imagePrompt,
        },
      ],
      config: {
        responseModalities: ['TEXT', 'IMAGE'], 
      },
    });

    if (!media || !media.url) {
      throw new Error('Image generation failed or did not return a valid image URI.');
    }

    return {imageUri: media.url};
  }
);
